# logic-bottle-game
import { makeAutoObservable } from 'mobx';
import { createContext } from 'react';

type ShelfItemType = BottlesEnum | null;
type ShelfItemsListType = ShelfItemType[];

class BottlesGameStore {
	draggedPosition: PositionType | null = null; // –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è drag-—ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
	positions: Record<ShelvesEnum, ShelfItemsListType>; // —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–µ–∫ –Ω–∞ –ø–æ–ª–∫–∞—Ö

	constructor() {
		makeAutoObservable(this);
		this.shuffle();
	}

	shuffle(): void { // –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –±—É—Ç—ã–ª–∫–∏
		this.positions = {
			[ShelvesEnum.top]: new Array(correctPositions.length).fill(null),
			[ShelvesEnum.bottom]: [...correctPositions].sort(
				() => Math.random() - 0.5
			),
		};

		this.isOneAtBottomCorrect && this.shuffle(); // –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç–æ–∏—Ç –Ω–∞ –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
	}

	get isOneAtBottomCorrect(): boolean {
		return correctPositions.some(
			(bottleId, columnIndex) =>
				bottleId === this.positions[ShelvesEnum.bottom][columnIndex]
		);
	}

	onDrag(position: PositionType): void {
		this.draggedPosition = position;
	}

	onDrop(bottleId: number, position: PositionType): void {
		const itemAtDrop = this.getItem(position); // –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ç—ã–ª–∫—É –≤ drop-—è—á–µ–π–∫–µ
		if (itemAtDrop || !this.draggedPosition || this.isCorrect) {
			return;
		}

		this.setItem(this.draggedPosition, null); // —É–¥–∞–ª—è–µ–º –±—É—Ç—ã–ª–∫—É –∏–∑ drag-—è—á–µ–π–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏–ª–∞—Å—å –≤ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
		this.setItem(position, bottleId); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±—É—Ç—ã–ª–∫—É –≤ drop-—è—á–µ–π–∫—É
	}

	getItem(position: PositionType): ShelfItemType {
		const [shelfIndex, columnIndex] = position;
		return this.positions[shelfIndex][columnIndex];
	}

	setItem(position: PositionType, item: ShelfItemType): void {
		const [shelfIndex, columnIndex] = position;
		this.positions[shelfIndex][columnIndex] = item;
	}

  get isCorrect(): boolean { // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
	  return (
		  JSON.stringify(correctPositions) ===
		  JSON.stringify(this.positions[ShelvesEnum.top]) // —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± ü§®
	  );
  }

  get isUncorrect(): boolean { // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Ö–Ω—è—è –ø–æ–ª–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –≤–µ—Ä–Ω—ã
		return (
			!this.isCorrect &&
			this.positions[ShelvesEnum.top].every((position) => position !== null)
		);
	}
}
–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É –∏–∑ –ª—é–±–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç.

const BottlesGameContext = createContext<BottlesGameStore | null>(null); // —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—à–∏–º —Å—Ç–æ—Ä–æ–º

const useStore = <T>(context: React.Context<T | null>): T => { // –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
	const data = useContext(context);
	if (!data) {
		throw new Error('Using store outside of context');
	}
	return data;
};
